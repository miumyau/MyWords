import SwiftUI
import CoreData
struct BookView: View {
    // MARK: - Properties
    @ObservedObject var book: Book // –ù–∞–±–ª—é–¥–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ Book
    @Environment(\.presentationMode) var presentationMode // –†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    @State private var showAddStats = false // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –æ–∫–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    @State private var showAddWordsPopover = false // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤
    @Environment(\.managedObjectContext) private var viewContext // –ö–æ–Ω—Ç–µ–∫—Å—Ç —É–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ CoreData
    @State private var date = Date() // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
    @State private var words: String = "" // –í–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
    @State private var hours: String = "" // –í–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤
    @State private var place: String = "" // –í–≤–µ–¥–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã
    @State private var mood: String = "ü§©" // –í—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    @State private var showEmojiSelection = false // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —ç–º–æ–¥–∑–∏
    // MARK: - Functions
    // –°–±—Ä–æ—Å –≤—Å–µ—Ö –ø–æ–ª–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    private func resetStatsFields() {
        words = ""
        place = ""
        hours = ""
        mood = "ü§©"
        date = Date()
    }
    
    // MARK: - Body
    var body: some View {
        ZStack {
            VStack {
                // –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏
                Text(book.name ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    .font(.custom("MontserratAlternates-Regular", size: 31))
                    .padding()
                    .foregroundColor(.white)
                // –®–∫–∞–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                HStack {
                    Spacer()
                    ProgressView(value: Double(book.readywords) / Double(book.totalwords), total: 1)
                        .progressViewStyle(LinearProgressViewStyle())
                        .accentColor(.white)
                        .frame(height: 12)
                        .padding(.horizontal, 20)
                    Spacer()
                }
                // –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
                HStack {
                    Spacer()
                    Text("\(book.readywords)/\(book.totalwords)")
                        .padding()
                        .foregroundColor(.white)
                        .font(.custom("MontserratAlternates-Regular", size: 16))
                        .multilineTextAlignment(.center)
                    Spacer()
                }
                Spacer()
                // –ü–æ–ª–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –∫–Ω–∏–≥–æ–π
                HStack {
                    Text("–ß–∞—Å–æ–≤ –∑–∞ —Ç–µ–∫—Å—Ç–æ–º")
                        .padding()
                        .foregroundColor(.white)
                        .font(.custom("MontserratAlternates-Regular", size: 16))
                        .frame(maxWidth: .infinity, alignment: .leading)
                    Text("\(book.allhours)")
                        .padding()
                        .foregroundColor(.white)
                        .font(.custom("MontserratAlternates-Regular", size: 16))
                        .frame(alignment: .trailing)
                }
                // –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –¥–µ–Ω—å
                HStack {
                    Text("–í —Å—Ä–µ–¥–Ω–µ–º —Å–ª–æ–≤ –≤ –¥–µ–Ω—å")
                        .padding()
                        .foregroundColor(.white)
                        .font(.custom("MontserratAlternates-Regular", size: 16))
                        .frame(maxWidth: .infinity, alignment: .leading)
                    
                    if book.alldays != 0 {
                        let averageWordsPerDay = book.readywords / book.alldays
                        Text("\(averageWordsPerDay)")
                            .padding()
                            .foregroundColor(.white)
                            .font(.custom("MontserratAlternates-Regular", size: 16))
                            .frame(alignment: .trailing)
                    } else {
                        Text("0")
                            .padding()
                            .foregroundColor(.white)
                            .font(.custom("MontserratAlternates-Regular", size: 16))
                            .frame(alignment: .trailing)
                    }
                }
                // –°–∞–º—ã–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å
                HStack {
                    Text("–°–∞–º—ã–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π\n–¥–µ–Ω—å")
                        .padding()
                        .foregroundColor(.white)
                        .font(.custom("MontserratAlternates-Regular", size: 16))
                        .frame(maxWidth: .infinity, alignment: .leading)
                    
                    Text("\(book.mostProductiveDay ?? Date(), formatter: BookViewModel.shared.datebookFormatter)")
                        .padding()
                        .foregroundColor(.white)
                        .font(.custom("MontserratAlternates-Regular", size: 16))
                        .frame(alignment: .trailing)
                }
                // –°–∞–º–æ–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–µ –º–µ—Å—Ç–æ
                HStack {
                    Text("–°–∞–º–æ–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–µ\n–º–µ—Å—Ç–æ")
                        .padding()
                        .foregroundColor(.white)
                        .font(.custom("MontserratAlternates-Regular", size: 16))
                        .frame(maxWidth: .infinity, alignment: .leading)
                    Text("\(book.mostProductivePlace ?? "")")
                        .padding()
                        .foregroundColor(.white)
                        .font(.custom("MontserratAlternates-Regular", size: 16))
                        .frame(alignment: .trailing)
                }
                // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –¥–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                Text("–° —Ç–∞–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é \n –≤—ã –∑–∞–∫–æ–Ω—á–∏—Ç–µ –∫ ")
                    .padding()
                    .foregroundColor(.white)
                    .font(.custom("MontserratAlternates-Regular", size: 20))
                    .multilineTextAlignment(.center)
                
                if let targetDate = book.calculateTargetDate() {
                    let endDate = book.endDate
                    Text("\(targetDate, formatter: BookViewModel.shared.datebookFormatter)")
                        .padding()
                        .foregroundColor(targetDate <= endDate! ? .green1 : .red1)
                        .font(.custom("MontserratAlternates-Regular", size: 22))
                } else {
                    Text("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å")
                        .padding()
                        .foregroundColor(.red)
                        .font(.custom("MontserratAlternates-Regular", size: 22))
                }
                Spacer()
                // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤
                Button(action: {
                    showAddWordsPopover.toggle()
                }) {
                    Text("–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞")
                        .font(.custom("MontserratAlternates-Regular", size: 20))
                        .padding()
                        .frame(width: 250.0, height: 60.0)
                        .background(Color.white)
                        .foregroundColor(.black)
                        .clipShape(Capsule())
                }
                // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                NavigationLink(destination: StatisticsView(book: book).environment(\.managedObjectContext, viewContext)) {
                    Text("–ò—Å—Ç–æ—Ä–∏—è")
                        .font(.custom("MontserratAlternates-Regular", size: 20))
                        .padding()
                        .frame(width: 250.0, height: 60.0)
                        .background(Color.clear)
                        .foregroundColor(.white)
                }
                .padding()
                .frame(height: 50.0)
                .fullScreenCover(isPresented: $showAddStats) {
                    StatisticsView(book: book)
                        .environment(\.managedObjectContext, viewContext)
                }
            }
            .padding()
            .navigationBarBackButtonHidden(true)
            .navigationBarItems(leading: Button(action: {
                self.presentationMode.wrappedValue.dismiss()
            }) {
                HStack {
                    Image(systemName: "chevron.left")
                        .foregroundColor(.white)
                    Text("") // –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç —É–±–∏—Ä–∞–µ—Ç –Ω–∞–¥–ø–∏—Å—å "Back"
                }
            })
            .background(Color.black)
            // –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤
            if showAddWordsPopover {
                Color.black
                    .edgesIgnoringSafeArea(.all)
                    .onTapGesture {
                        showAddWordsPopover = false
                        UIApplication.shared.sendAction(#selector(UIResponder.resignFirstResponder), to: nil, from: nil, for: nil)
                    }
                AddWordsPopover(book: book, showAddWordsPopover: $showAddWordsPopover)
                    .frame(width: 380, height: 380)
                    .background(Color.white)
                    .cornerRadius(25)
                    .shadow(radius: 10)
            }
        }
    }
}

